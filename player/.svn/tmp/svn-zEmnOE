/* Board.java */

package player;

import list.*;

/**
 *  A data structure to store nodes on a board.
 *
 *
 */
public class Board implements Cloneable {

  public static final int COLOR_BLACK = 0;
  public static final int COLOR_WHITE = 1;
  public static final int COLOR_NONE = -1;

  private Node[][] board;
  private int bchips;
  private int wchips;

  /**
   * Board constructor w/ no params
   * creates 8x8 2D Node array
   */
  protected Board() {
    board = new Node[8][8];
    for (int i = 0; i < 8; i++)
    {
      for (int j = 0; j < 8; j++)
      {
        board[i][j] = new Node(COLOR_NONE, new Position(i, j));
      }
    }
    bchips = 0;
    wchips = 0;
  }
  
  private void setChipCount(int color, int i) {
    if (color == COLOR_BLACK) {
      bchips = bchips + i;
      return;
    }
    if (color == COLOR_WHITE) {
      wchips = wchips + i;
      return;
    }
  }

  public void setChip(int color,int x, int y) {
	  board[x][y] = new Node (color, new Position(x,y));
    setChipCount(color,1);
  }

  public void clearChip(int x, int y) {
    setChipCount(board[x][y].getColor(),-1);
    board[x][y] = new Node(COLOR_NONE, new Position(x,y));
  }

  /**
   * @return number of chips of specified color
   * @param color the color of the chip
   */
  public int getChipCount(int color)
  {
    if (color == COLOR_BLACK)
    {
      return bchips;
    }
    else if (color == COLOR_WHITE)
    {
      return wchips;
    }
    else
    {
      return 0;
    }
  }

  /**
   * @return Node from specified xy-coordinate
   * @param x is x-coordinate
   * @param y is y-coordinate
   */
  public Node getNode(int x, int y)
  {
    return board[x][y];
  }

  /**
   * @check if Position is good for specified player color
   * @param p is the Position to check
   * @param color is black or white
   */
  public boolean goodPosition(Position p, int color)
  {
    //if the color isn't black or white, return false
    if (color != COLOR_BLACK && color != COLOR_WHITE)
    {
      return false; 
    }
    else if (color == COLOR_BLACK)
    {
      //if the color is black and it's in goal of white or in a corner, return false
      if (p.x <= 0 || p.x >= 7 || p.y < 0 || p.y > 7)
      {
        return false;
      }
    }
    else if (color == COLOR_WHITE)
    {
      //if the color is white and it's in the goal of black or in a corner, return false
      if (p.x < 0 || p.x > 7 || p.y <= 0 || p.y >= 7)
      {
        return false;
      }
    }
    //if all tests passed, return true
    return true;
  }

  /**
   * @return neighboring Nodes surrounding n
   * @param n is the node to check
   */
  public ArrayList<Node> getNeighbors(Node n)
  {
    return this.getNeighbors(n.getPosition(), n.getColor());
  }

  /**
   * @return neighboring Nodes of color surrounding p
   * @param p is the position to check
   * @param color is the color of the Nodes we are looking for
   */
  public ArrayList<Node> getNeighbors(Position p, int color) {
    ArrayList<Node> d = new ArrayList<Node>();
    int x = p.x;
    int y = p.y;
    //for all positions surrounding the node
    for (int i=x-1; i<x+2; i++) {
      for (int j=y-1; j<y+2; j++) {
        //if the position is not out of bounds
        if (i != x && j != y && i>=0 && j>=0 && i<=7 && j<=7) {
          //if there is a node and it is the same color as n
          if (getNode(i,j) != null && getNode(i,j).getColor() == color) {
            //add to d.
            d.append(getNode(i, j));
          }
        }
      }
    }
    return d;
  }

  public void makeMove(Move move, int color)
  {
	if (isValidMove(move, color))
	{
		if (move.moveKind == Move.STEP)
		{
			clearChip(move.x2,move.y2);
		}
        setChip(color, move.x1, move.y1);
    }
  }

  /**
   * helper for isValidMove

   * @param move is the move you want to make
   * @param color is the color of the player making the move
   */
  public boolean canMove(Move move, int color) {
    //if there are already 10 chips on the board, return false
    if (getChipCount(color) >= 10) {
      return false;
    }
    //if it's in a goal area of the opposite color or in a corner, return false
    if (!(goodPosition(new Position(move.x1,move.y1),color))) {
      return false;
    }
    //if there is already a node in the position, return false

    if (getNode(move.x1,move.y1) != null) {
      return false;
    }
    //the following checks only apply to STEP moves 
    if (move.moveKind == Move.STEP) {
      //if the player is tries moving the chip to the same place, return false
      if (move.x1 == move.x2 && move.y1 == move.y2) {
        return false;
      }
      //if the player tries making a step move prior to using up his add moves, return false
      if (getChipCount(color) < 9) {





        return false;
      }
    }
    //find the neighbors around the prospective move
    ArrayList<Node> n = getNeighbors(new Position(move.x1,move.y1),color);
    //if it has two or more neighbors, return false
    if (n.length() >= 2) {
      return false;
    }
    if (n.length() == 1) {
      //if it has one neighbor whose list of neighbors is not empty, return false
      if (getNeighbors(n.first().pos, color).length() > 0) {
        return false;

      }
    }
    //otherwise the move is legal, return true
    return true;
  }
  
  /**
   * checks to see if a given move is valid for the given color.
   * @param move is the move you want to make
   * @param color is the color of the player making the move
   */
  public boolean canMove(Move move, int color) {
    //if there are already 10 chips on the board, return false
    if (getChipCount(color) >= 10) {
      return false;
    }
    //if it's in a goal area of the opposite color or in a corner, return false
    if (!(goodPosition(new Position(move.x1,move.y1),color))) {
      return false;
    }
    //if there is already a node in the position, return false
    if (getNode(move.x1,move.y1) != null) {
      return false;
    }
    //the following checks only apply to STEP moves 
    if (move.moveKind == STEP) {
      //if the player is tries moving the chip to the same place, return false
      if (move.x1 == move.x2 && move.y1 == move.y2) {
        return false;
      }
      //if the player tries making a step move prior to using up his add moves, return false
      if (getChipCount(color) < 9) {
        return false;
      }
    }
    //find the neighbors around the prospective move
    ArrayList<Node> n = getNeighbors(new Position(move.x1,move.y1),color);
    //if it has two or more neighbors, return false
    if (n.length() >= 2) {
      return false;
    }
    if (n.length() == 1) {
      //if it has one neighbor whose list of neighbors is not empty, return false
      if (getNeighbors(n.first().pos, color).length() > 0) {
        return false;
      }
    }
    //otherwise the move is legal, return true
    return true;
  }
 
/**
  * checks to see if a given move is valid for the given color.
  * @param move is the move you want to make
  * @param color is the color of the player making the move
  */ 
  public boolean isValidMove(Move move, int color) {
    //if the move is an ADD move
    if (move.moveKind == Move.ADD) {
      //call helper to check validity of move
      if (canMove(move,color)) {
        return true;
      } 
    } else if (move.moveKind == Move.STEP) { //otherwise if it's a STEP move
      //temporarily remove chip from old pos
      clearChip(move.x2, move.y2);
      //check validity with helper
      if (canMove(move,color)) {
        //always put the chip back, true or false
        setChip(color, move.x2, move.y2);
        return true;
      } else {
        setChip(color, move.x2, move.y2);
        return false;
      }
    }
    return false;
  }

  /**
  * makes a ArrayList of Moves; the list of all moves a player can make at the moment.
  * @param color is the color of the player we are evaluating
  */
  public ArrayList<Move> FindValidMoves(int color) {
    //make an array moves to keep all valid moves
    ArrayList<Move> moves = new ArrayList<Move>();
    //check every coordinate on the board
    for(int i=0; i<8; i++) {
      for(int j=0; j<8; j++) {
        Move add = new Move(i,j);
        //if we can add the chip, add the move to moves
        if (isValidMove(add, color)) {
          moves.append(add);
        } 
      }
    }
    //check every coordinate on the board
    for(int i=0; i<8; i++) {
      for(int j=0; j<8; j++) {
        //if there is a node
        if(getNode(i,j).getColor() != COLOR_NONE) {
          //then for this particular node, check every coord on the board again
          for(int k=0; k<8; k++) {
            for(int l=0; l<8; l++) {
              Move step = new Move(k,l,i,j);
              //if we can move the chip, add the move to moves
              if(isValidMove(step, color)) {
                moves.append(step);
              }
            }
          }
        }
      }
    } //check the whole board for each coord on the board
    return moves;
  }
  
  @Override
  protected Object clone()
  {
    Board b = new Board();

    for (int i = 0; i < 8; i++)
    {
      for (int j = 0; j < 8; j++)
      {
        b.board[i][j] = this.board[i][j];
      }
    }

    b.bchips = this.bchips;
    b.wchips = this.wchips;

    return b;
  }
    
    /**
     * find all partial networks containing certain chip
     * @param certain chip represented by position x, position y, and color
     * @return LinkedList contains all partial networks
     */
    public LinkedList<Network> findNetworks(int x, int y, int color){
        Node node = getNode(x,y);
        LinkedList<Network> list = new LinkedList<Network>();
        
        if (getNode(x,y) != null && getNode(x,y).getColor() == color){
            list = findNetworks(node);
        }
        return list;
    }
    
    /**
     * find all partial networks containing certain chip
     * @param certain chip represented by node
     * @return LinkedList contains all partial networks
     */
    
    public LinkedList<Network> findNetworks(Node n)
    {    
    	return this.findNetworks(n, Direction.NONE);
    }

    public LinkedList<Network> findNetworks(Node n, Direction previousDirection)
    {
      Node curr = n;
      LinkedList<Network> networks = new LinkedList<Network>();
            
      if( curr != null)
      {
        for (Direction d : Direction.DIRECTIONS)
        {
          if (d == Direction.reverse(previousDirection) || d == previousDirection)
          {
            continue;
          }

          Node next = this.getNext(curr, d);
          if (next == null)
          {
            continue;
          }

          LinkedList<Node> network = new LinkedList<Node>();
          network.append(curr);
          network.append(next);
          networks.append(new Network(network));
        }
      }
      return networks;
    }

    private Node getNext(Node curr, Direction direction)
    {
      int x = curr.pos.x + direction.xIncrement;
      int y = curr.pos.y + direction.yIncrement;
      while (x >= 0 && x < 8 && y >= 0 && y < 8)
      {
        if (getNode(x, y).getColor() == COLOR_NONE)
        {
          x += direction.xIncrement;
          y += direction.yIncrement;
        }
        else if (getNode(x, y).getColor() == curr.getColor())
        {
          return getNode(x, y);
        }
        else
        {
          break;
        }
      }

      return null;
    }
    	
    

  public static void main(String[] args) {
	  Board one = new Board();
//	  one.setChip(0, 3, 4);
//	  one.setChip(1, 3, 3);
//	  one.setChip(0, 3, 2);

	  one.setChip(0, 3, 4);
	  one.setChip(0, 4, 5);
	  
//	  one.setChip(1, 2, 5);

	  System.out.println(one.findNetworks(one.getNode(3, 4)).first().getSecondChip().toString());


  }
}
